searchState.loadedDescShard("egonlang_verifier", 0, "Type environment that tracks string identifiers to typing …\nTyping information stored about an identifier\nVerify an AST [<code>Module</code>] using the registered [<code>Rule</code>] set\nCreate a verifier <code>Rule</code> for an expression\nCreate a verifier <code>Rule</code> for a statement\nVerify a <code>egonlang_core::ast::Module</code> using the core …\nType environment that tracks string identifiers to typing …\nTyping information stored about an identifier\nVerify an AST [<code>Module</code>] using the registered [<code>Rule</code>] set\nRegister a [<code>Rule</code>]\nCreate a <code>Verifier</code> with the [<code>Rule</code>] set\nCreate a verifier <code>Rule</code> for an expression\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to resolve an identifier’s type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet this type environment’s index in the <code>Verifier</code>’s …\nCreate a <code>Verifier</code> with no default [<code>Rule</code>] set\nResolve an expression’s type recursively. This will …\nSet an identifier’s type\nCreate a verifier <code>Rule</code> for a statement\nVerify an AST [<code>Module</code>] using the registered [<code>Rule</code>] set\nRegister the core language [<code>Rule</code>] set\nRule for verifying statements and expressions\nCore syntax rules for the egon language\nEgon Verifier Statement Rule\nEgon Verifier Statement Rule\nEgon Verifier Expression Rule\nEgon Verifier Statement Rule\nEgon Verifier Statement Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nEgon Verifier Statement Rule\nEgon Verifier Expression Rule\nEgon Verifier Expression Rule\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")