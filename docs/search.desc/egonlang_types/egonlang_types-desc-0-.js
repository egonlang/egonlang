searchState.loadedDescShard("egonlang_types", 0, "Type in the Egon language\nCreate a <code>bool</code> type instance\nReturns the argument unchanged.\nCreate a <code>function</code> type instance\nCreate an <code>identifier</code> type instance\nCalls <code>U::from(self)</code>.\nIs this type a bool type?\nIs this type a builtin type?\nIs this type a function type?\nIs this type an identifier type?\nIs this type a list with a known value type?\nIs this type a list?\nIs this type a number type?\nIs this type a range type?\nIs this type a string type?\nIs this type a tuple type?\nIs this type a type?\nIs this type the unit type?\nIs this type unknown?\nIs this type a list with a unknown value type?\nCreate a <code>list&lt;T&gt;</code> type instance\nCreate a <code>number</code> type instance\nCreate a <code>range</code> type instance\nCreate a <code>string</code> type instance\nCreate a <code>tuple&lt;T, U...&gt;</code> type instance\nCreate a <code>tuple&lt;T, U&gt;</code> type instance\nCreate a <code>tuple&lt;T, U, V&gt;</code> type instance\nCreate a <code>type</code> type instance\nCreate a <code>()</code> type instance\nCreate an <code>unknown</code> type instance\nCreate a <code>list&lt;unknown&gt;</code> type instance\nStore and retreive type information for string identifiers\nTyping information stored about an identifier\nEnd the current scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nResolve string to possible typing information\nGet the depth of current scope\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet string to have typing information\nStart a new scope")