var searchIndex = new Map(JSON.parse('[\
["egon",{"t":"FGPPPNNNNNNNNNONNNNNNNNNNNHNNNNNNNNNNOOOO","n":["Cli","Commands","Lex","Parse","Verify","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","path","path","path","use_tokens_file"],"q":[[0,"egon"],[37,"egon::Commands"],[41,"clap_builder::builder::command"],[42,"clap_builder::parser::matches::arg_matches"],[43,"clap_builder"],[44,"core::result"],[45,"clap_builder::util::id"],[46,"core::option"],[47,"core::any"]],"i":[0,0,8,8,8,5,5,8,8,5,8,5,8,5,5,5,5,8,5,8,5,8,5,8,5,8,0,5,8,5,8,5,8,5,8,5,8,15,16,17,16],"f":"`````{bb}000{{{d{c}}}{{d{e}}}{}{}}0{{{d{fc}}}{{d{fe}}}{}{}}0{{}b}`0{cc{}}0{{{d{h}}}{{n{jl}}}}{{{d{h}}}{{n{A`l}}}}{{{d{fh}}}{{n{jl}}}}{{{d{fh}}}{{n{A`l}}}}{{}{{Ad{Ab}}}}{{{d{Af}}}Ah}{ce{}{}}0{{}Aj}{c{{n{e}}}{}{}}000{{{d{c}}}Al{}}0{{{d{fj}}{d{h}}}{{n{Ajl}}}}{{{d{fA`}}{d{h}}}{{n{Ajl}}}}{{{d{fj}}{d{fh}}}{{n{Ajl}}}}{{{d{fA`}}{d{fh}}}{{n{Ajl}}}}````","D":"Af","p":[[5,"Command",41],[1,"reference"],[0,"mut"],[5,"ArgMatches",42],[5,"Cli",0],[8,"Error",43],[6,"Result",44],[6,"Commands",0],[5,"Id",45],[6,"Option",46],[1,"str"],[1,"bool"],[1,"unit"],[5,"TypeId",47],[15,"Verify",37],[15,"Parse",37],[15,"Lex",37]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB4ABAAAAAIABgAKABMABQAbAAoA"}],\
["egonlang_core",{"t":"CCCCPPPPGPPPPPPGPPFFFFFFFFGFFIFFPPPPFPPPPPPPPPPFPPPPPPGGPPPGPFFFFFIFPPPPPPPOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOONNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNIHHEE","n":["ast","lexer","parser","prelude","Add","AssertType","Assign","Assign","AstNode","Block","Bool","Call","Divide","Equal","Error","Expr","Expr","Expr","ExprAssign","ExprBlock","ExprCall","ExprFn","ExprIdentifier","ExprIf","ExprInfix","ExprList","ExprLiteral","ExprPrefix","ExprRange","ExprS","ExprTuple","ExprType","Fn","Fn","Greater","GreaterEqual","Identifier","Identifier","Identifier","If","Infix","Less","LessEqual","List","Literal","LogicAnd","LogicOr","Module","Modulus","Multiply","Negate","Not","NotEqual","Number","OpInfix","OpPrefix","Prefix","Range","Return","Stmt","Stmt","StmtAssertType","StmtAssign","StmtExpr","StmtFn","StmtReturn","StmtS","StmtTypeAlias","String","Subtract","Tuple","Type","Type","TypeAlias","Unit","alias","args","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callee","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cond","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","else_","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expected_type","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_expr","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_by_index","get_used_in_block","identifier","identifier","identifier","inclusive_end","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_const","items","items","lt","name","name","name","new","new","node_type","op","op","params","return_expr","return_type","rt","rt","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_used_in_block","start","stmts","stmts","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_expr","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typeref","value","value","value","value","value","And","AssertType","Asterisk","Bang","BangEqual","BraceClose","BraceOpen","BracketClose","BracketOpen","Colon","Comma","Const","DotDot","Else","Equal","EqualEqual","Error","False","FatArrow","Fn","Greater","GreaterEqual","Identifier","If","Less","LessEqual","Let","Lexer","Minus","Modulus","Number","Or","ParanClose","ParanOpen","Plus","Return","Semicolon","Slash","String","Token","True","Type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","fmt","fmt","from","from","into","into","into_iter","lex","new","next","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Parser","is_complete","parse","ast","parse"],"q":[[0,"egonlang_core"],[4,"egonlang_core::ast"],[551,"egonlang_core::lexer"],[619,"egonlang_core::parser"],[622,"egonlang_core::prelude"],[624,"egonlang_core::ast::expressions"],[625,"egonlang_core::ast::statements"],[626,"egonlang_core::ast::module"],[627,"core::result"],[628,"serde::de"],[629,"core::fmt"],[630,"alloc::string"],[631,"alloc::boxed"],[632,"alloc::vec"],[633,"serde::ser"],[634,"egonlang_errors"],[635,"core::any"],[636,"logos::lexer"],[637,"core::option"]],"i":[0,0,0,0,11,20,3,20,0,3,4,3,11,11,20,0,32,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,20,11,11,0,3,32,3,3,11,11,3,3,11,11,0,11,11,13,13,11,4,0,0,3,3,20,0,32,0,0,0,0,0,0,0,4,11,3,3,32,20,3,23,19,16,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,19,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,15,9,17,28,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,20,21,22,23,24,25,26,15,17,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,25,21,3,3,4,4,5,5,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,28,32,20,20,21,21,22,22,23,23,24,24,25,25,26,26,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,28,32,20,20,20,20,20,20,21,22,23,24,25,26,28,26,5,14,22,17,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,22,8,9,10,6,16,24,28,26,32,10,12,16,7,16,10,12,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,20,21,22,23,24,25,26,26,17,7,28,15,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,20,21,22,23,24,25,26,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,22,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,28,32,20,21,22,23,24,25,26,7,14,22,23,25,26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,0,46,46,47,46,47,46,46,46,46,46,47,46,47,46,47,46,47,46,47,47,46,46,47,46,47,46,47,46,0,0,0,0,0],"f":"``````````````````````````````````````````````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}0000000000000000000000000{{{b{dc}}}{{b{de}}}{}{}}0000000000000000000000000`{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{l}}}l}{{{b{n}}}n}{{{b{A`}}}A`}{{{b{Ab}}}Ab}{{{b{Ad}}}Ad}{{{b{Af}}}Af}{{{b{Ah}}}Ah}{{{b{Aj}}}Aj}{{{b{Al}}}Al}{{{b{An}}}An}{{{b{B`}}}B`}{{{b{Bb}}}Bb}{{{b{Bd}}}Bd}{{{b{Bf}}}Bf}{{{b{Bh}}}Bh}{{{b{Bj}}}Bj}{{{b{Bl}}}Bl}{{{b{Bn}}}Bn}{{{b{C`}}}C`}{{{b{Cb}}}Cb}{{{b{Cd}}}Cd}{{{b{c}}{b{de}}}Cf{}{}}00000000000000000000000`{{}Ab}{{}Bb}{{}Ch}{c{{Cj{f}}}Cl}{c{{Cj{h}}}Cl}{c{{Cj{j}}}Cl}{c{{Cj{l}}}Cl}{c{{Cj{n}}}Cl}{c{{Cj{A`}}}Cl}{c{{Cj{Ab}}}Cl}{c{{Cj{Ad}}}Cl}{c{{Cj{Af}}}Cl}{c{{Cj{Ah}}}Cl}{c{{Cj{Aj}}}Cl}{c{{Cj{Al}}}Cl}{c{{Cj{An}}}Cl}{c{{Cj{B`}}}Cl}{c{{Cj{Bb}}}Cl}{c{{Cj{Bd}}}Cl}{c{{Cj{Bf}}}Cl}{c{{Cj{Ch}}}Cl}{c{{Cj{Bh}}}Cl}{c{{Cj{Bj}}}Cl}{c{{Cj{Bl}}}Cl}{c{{Cj{Bn}}}Cl}{c{{Cj{C`}}}Cl}{c{{Cj{Cb}}}Cl}{c{{Cj{Cd}}}Cl}``{{{b{f}}{b{f}}}Cn}{{{b{h}}{b{h}}}Cn}{{{b{j}}{b{j}}}Cn}{{{b{l}}{b{l}}}Cn}{{{b{n}}{b{n}}}Cn}{{{b{A`}}{b{A`}}}Cn}{{{b{Ab}}{b{Ab}}}Cn}{{{b{Ad}}{b{Ad}}}Cn}{{{b{Af}}{b{Af}}}Cn}{{{b{Ah}}{b{Ah}}}Cn}{{{b{Aj}}{b{Aj}}}Cn}{{{b{Al}}{b{Al}}}Cn}{{{b{An}}{b{An}}}Cn}{{{b{B`}}{b{B`}}}Cn}{{{b{Bb}}{b{Bb}}}Cn}{{{b{Bd}}{b{Bd}}}Cn}{{{b{Bf}}{b{Bf}}}Cn}{{{b{Ch}}{b{Ch}}}Cn}{{{b{D`}}{b{D`}}}Cn}{{{b{Bh}}{b{Bh}}}Cn}{{{b{Bj}}{b{Bj}}}Cn}{{{b{Bl}}{b{Bl}}}Cn}{{{b{Bn}}{b{Bn}}}Cn}{{{b{C`}}{b{C`}}}Cn}{{{b{Cb}}{b{Cb}}}Cn}{{{b{Cd}}{b{Cd}}}Cn}``{{{b{f}}{b{dDb}}}Dd}0{{{b{h}}{b{dDb}}}Dd}0{{{b{j}}{b{dDb}}}Dd}0{{{b{l}}{b{dDb}}}Dd}{{{b{n}}{b{dDb}}}Dd}0{{{b{A`}}{b{dDb}}}Dd}0{{{b{Ab}}{b{dDb}}}Dd}0{{{b{Ad}}{b{dDb}}}Dd}0{{{b{Af}}{b{dDb}}}Dd}0{{{b{Ah}}{b{dDb}}}Dd}0{{{b{Aj}}{b{dDb}}}Dd}0{{{b{Al}}{b{dDb}}}Dd}0{{{b{An}}{b{dDb}}}Dd}0{{{b{B`}}{b{dDb}}}Dd}0{{{b{Bb}}{b{dDb}}}Dd}0{{{b{Bd}}{b{dDb}}}Dd}0{{{b{Bf}}{b{dDb}}}Dd}0{{{b{Ch}}{b{dDb}}}Dd}{{{b{D`}}{b{dDb}}}Dd}{{{b{Bh}}{b{dDb}}}Dd}0{{{b{Bj}}{b{dDb}}}Dd}0{{{b{Bl}}{b{dDb}}}Dd}0{{{b{Bn}}{b{dDb}}}Dd}0{{{b{C`}}{b{dDb}}}Dd}0{{{b{Cb}}{b{dDb}}}Dd}0{{{b{Cd}}{b{dDb}}}Dd}0`{jf}{Alf}{nf}{cc{}}{Dff}{Dhf}{Ahf}{Bdf}{A`f}{Abf}{hf}{Adf}{lf}{{{Dj{n}}}f}{Cnf};{Cnh}{Dfh}{Dhh}>{lj}??????????????{{{Dn{Dl}}}Ch}{cc{}}0{BnBh}{BjBh}2{CbBh}{C`Bh}{BlBh}555555{{{b{Ch}}E`}{{Dn{D`}}}}{{{b{Cd}}}Cn}````{ce{}{}}0000000000000000000000000```````{{}Ch}{EbCd}{{{b{D`}}}Dh}```````{{{b{f}}c}CjEd}{{{b{h}}c}CjEd}{{{b{j}}c}CjEd}{{{b{l}}c}CjEd}{{{b{n}}c}CjEd}{{{b{A`}}c}CjEd}{{{b{Ab}}c}CjEd}{{{b{Ad}}c}CjEd}{{{b{Af}}c}CjEd}{{{b{Ah}}c}CjEd}{{{b{Aj}}c}CjEd}{{{b{Al}}c}CjEd}{{{b{An}}c}CjEd}{{{b{B`}}c}CjEd}{{{b{Bb}}c}CjEd}{{{b{Bd}}c}CjEd}{{{b{Bf}}c}CjEd}{{{b{Ch}}c}CjEd}{{{b{Bh}}c}CjEd}{{{b{Bj}}c}CjEd}{{{b{Bl}}c}CjEd}{{{b{Bn}}c}CjEd}{{{b{C`}}c}CjEd}{{{b{Cb}}c}CjEd}{{{b{Cd}}c}CjEd}{{{b{dCd}}}Cf}````{{{b{c}}}e{}{}}00000000000000000000000{{{b{c}}}Dh{}}0000000000000000000000{{{b{Ef}}}{{Cj{fEh}}}}{c{{Cj{e}}}{}{}}0000000000000000000{{{b{Ef}}}{{Cj{BhEh}}}}11111111111111111111111111111111`{{{b{c}}}Ej{}}0000000000000000000000000````````````````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}0{{{b{dc}}}{{b{de}}}{}{}}0{{{b{El}}}El}{{{b{c}}{b{de}}}Cf{}{}}{c{{Cj{El}}}Cl}{{{b{El}}{b{El}}}Cn}{{{b{En}}{b{dDb}}}Dd}{{{b{El}}{b{dDb}}}Dd}{cc{}}0{ce{}{}}00{{{b{d{F`{El}}}}}Cf}{{{b{Ef}}}En}{{{b{dEn}}}{{Fb{c}}}{}}{{{b{El}}c}CjEd}{{{b{c}}}e{}{}}{c{{Cj{e}}}{}{}}000{{{b{c}}}Ej{}}0`{{{b{Ef}}}Cn}{{{b{Ef}}E`}{{Fd{Ch}}}}``","D":"Mb","p":[[1,"reference"],[0,"mut"],[6,"Expr",4,624],[6,"ExprLiteral",4,624],[5,"ExprIdentifier",4,624],[5,"Identifier",4,624],[5,"ExprBlock",4,624],[5,"ExprList",4,624],[5,"ExprTuple",4,624],[5,"ExprInfix",4,624],[6,"OpInfix",4,624],[5,"ExprPrefix",4,624],[6,"OpPrefix",4,624],[5,"ExprAssign",4,624],[5,"ExprIf",4,624],[5,"ExprFn",4,624],[5,"ExprRange",4,624],[5,"ExprType",4,624],[5,"ExprCall",4,624],[6,"Stmt",4,625],[5,"StmtExpr",4,625],[5,"StmtAssign",4,625],[5,"StmtTypeAlias",4,625],[5,"StmtFn",4,625],[5,"StmtAssertType",4,625],[5,"StmtReturn",4,625],[1,"unit"],[5,"Module",4,626],[6,"Result",627],[10,"Deserializer",628],[1,"bool"],[6,"AstNode",4,626],[5,"Formatter",629],[8,"Result",629],[1,"f64"],[5,"String",630],[5,"Box",631],[8,"StmtS",4,625],[5,"Vec",632],[1,"usize"],[8,"ExprS",4,624],[10,"Serializer",633],[1,"str"],[6,"EgonError",634],[5,"TypeId",635],[6,"Token",551],[5,"Lexer",551],[5,"Lexer",636],[6,"Option",637],[8,"EgonResultMultiSpannedErr",634]],"r":[[8,626],[15,624],[18,624],[19,624],[20,624],[21,624],[22,624],[23,624],[24,624],[25,624],[26,624],[27,624],[28,624],[29,624],[30,624],[31,624],[36,624],[47,626],[54,624],[55,624],[59,625],[61,625],[62,625],[63,625],[64,625],[65,625],[66,625],[67,625],[622,0],[623,619]],"b":[[238,"impl-Display-for-Expr"],[239,"impl-Debug-for-Expr"],[240,"impl-Display-for-ExprLiteral"],[241,"impl-Debug-for-ExprLiteral"],[242,"impl-Display-for-ExprIdentifier"],[243,"impl-Debug-for-ExprIdentifier"],[245,"impl-Display-for-ExprBlock"],[246,"impl-Debug-for-ExprBlock"],[247,"impl-Debug-for-ExprList"],[248,"impl-Display-for-ExprList"],[249,"impl-Display-for-ExprTuple"],[250,"impl-Debug-for-ExprTuple"],[251,"impl-Debug-for-ExprInfix"],[252,"impl-Display-for-ExprInfix"],[253,"impl-Debug-for-OpInfix"],[254,"impl-Display-for-OpInfix"],[255,"impl-Display-for-ExprPrefix"],[256,"impl-Debug-for-ExprPrefix"],[257,"impl-Debug-for-OpPrefix"],[258,"impl-Display-for-OpPrefix"],[259,"impl-Debug-for-ExprAssign"],[260,"impl-Display-for-ExprAssign"],[261,"impl-Debug-for-ExprIf"],[262,"impl-Display-for-ExprIf"],[263,"impl-Display-for-ExprFn"],[264,"impl-Debug-for-ExprFn"],[265,"impl-Display-for-ExprRange"],[266,"impl-Debug-for-ExprRange"],[267,"impl-Debug-for-ExprType"],[268,"impl-Display-for-ExprType"],[269,"impl-Debug-for-ExprCall"],[270,"impl-Display-for-ExprCall"],[273,"impl-Display-for-Stmt"],[274,"impl-Debug-for-Stmt"],[275,"impl-Display-for-StmtExpr"],[276,"impl-Debug-for-StmtExpr"],[277,"impl-Debug-for-StmtAssign"],[278,"impl-Display-for-StmtAssign"],[279,"impl-Debug-for-StmtTypeAlias"],[280,"impl-Display-for-StmtTypeAlias"],[281,"impl-Debug-for-StmtFn"],[282,"impl-Display-for-StmtFn"],[283,"impl-Debug-for-StmtAssertType"],[284,"impl-Display-for-StmtAssertType"],[285,"impl-Debug-for-StmtReturn"],[286,"impl-Display-for-StmtReturn"],[288,"impl-From%3CExprIdentifier%3E-for-Expr"],[289,"impl-From%3CExprAssign%3E-for-Expr"],[290,"impl-From%3CExprBlock%3E-for-Expr"],[292,"impl-From%3Cf64%3E-for-Expr"],[293,"impl-From%3CString%3E-for-Expr"],[294,"impl-From%3CExprPrefix%3E-for-Expr"],[295,"impl-From%3CExprType%3E-for-Expr"],[296,"impl-From%3CExprList%3E-for-Expr"],[297,"impl-From%3CExprTuple%3E-for-Expr"],[298,"impl-From%3CExprLiteral%3E-for-Expr"],[299,"impl-From%3CExprInfix%3E-for-Expr"],[300,"impl-From%3CIdentifier%3E-for-Expr"],[301,"impl-From%3CBox%3CExprBlock%3E%3E-for-Expr"],[302,"impl-From%3Cbool%3E-for-Expr"],[304,"impl-From%3Cbool%3E-for-ExprLiteral"],[305,"impl-From%3Cf64%3E-for-ExprLiteral"],[306,"impl-From%3CString%3E-for-ExprLiteral"],[326,"impl-From%3CStmtTypeAlias%3E-for-Stmt"],[327,"impl-From%3CStmtExpr%3E-for-Stmt"],[329,"impl-From%3CStmtAssertType%3E-for-Stmt"],[330,"impl-From%3CStmtFn%3E-for-Stmt"],[331,"impl-From%3CStmtAssign%3E-for-Stmt"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAcCGgAAAAUACwAAAA0AAgARAAAAFQAAACMAAgAnAAAAKgABAC4AAQAxAAcAPQAAAEUAAQBJAAAATADXACUBCgAxAQIANQEAAEQBAABHAQEASgECAFQBBABzAa4AIwIfAEQCFwBgAgwAbwIBAA=="}],\
["egonlang_diagnostics",{"t":"KTFFFFTTTNNNNNNNNONNNNNNNNNNONNNNNNNONNNNNNNNNNNNONNNNOONNNNONNNNOOMNNNNNNNNNNNNNNNN","n":["Diagnosable","ERROR","EgonDiagnosis","EgonDiagnosisPosition","EgonDiagnosisRange","EgonDiagnosisSeverity","HINT","INFORMATION","WARNING","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","character","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","default","default","default","deserialize","deserialize","deserialize","deserialize","end","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","index","into","into","into","into","line","message","new","new","partial_cmp","partial_cmp","range","serialize","serialize","serialize","serialize","severity","start","to_diagnosis","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"egonlang_diagnostics"],[84,"core::cmp"],[85,"core::result"],[86,"serde::de"],[87,"core::fmt"],[88,"core::option"],[89,"serde::ser"],[90,"span"],[91,"core::any"]],"i":[0,4,0,0,0,0,4,4,4,3,4,5,6,3,4,5,6,5,3,4,5,6,3,4,5,6,4,5,3,3,5,6,3,4,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,5,3,4,5,6,5,3,5,6,4,5,3,3,4,5,6,3,6,17,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6],"f":"`````````{{{b{c}}}{{b{e}}}{}{}}000{{{b{dc}}}{{b{de}}}{}{}}000`{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{l}}}l}{{{b{c}}{b{de}}}n{}{}}000{{{b{h}}{b{h}}}A`}{{{b{j}}{b{j}}}A`}`{{}f}{{}j}{{}l}{c{{Ab{f}}}Ad}{c{{Ab{h}}}Ad}{c{{Ab{j}}}Ad}{c{{Ab{l}}}Ad}`{{{b{f}}{b{f}}}Af}{{{b{h}}{b{h}}}Af}{{{b{j}}{b{j}}}Af}{{{b{l}}{b{l}}}Af}{{{b{f}}{b{dAh}}}Aj}{{{b{h}}{b{dAh}}}Aj}{{{b{j}}{b{dAh}}}Aj}{{{b{l}}{b{dAh}}}Aj}{cc{}}000`{ce{}{}}000``{{AlAlAl}j}{{jj}l}{{{b{h}}{b{h}}}{{An{A`}}}}{{{b{j}}{b{j}}}{{An{A`}}}}`{{{b{f}}c}AbB`}{{{b{h}}c}AbB`}{{{b{j}}c}AbB`}{{{b{l}}c}AbB`}``{{{b{Bb}}{b{Bd}}Bf}f}{{{b{c}}}e{}{}}000{c{{Ab{e}}}{}{}}0000000{{{b{c}}}Bh{}}000","D":"Af","p":[[1,"reference"],[0,"mut"],[5,"EgonDiagnosis",0],[5,"EgonDiagnosisSeverity",0],[5,"EgonDiagnosisPosition",0],[5,"EgonDiagnosisRange",0],[1,"unit"],[6,"Ordering",84],[6,"Result",85],[10,"Deserializer",86],[1,"bool"],[5,"Formatter",87],[8,"Result",87],[1,"usize"],[6,"Option",88],[10,"Serializer",89],[10,"Diagnosable",0],[1,"str"],[8,"Span",90],[5,"TypeId",91]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEkABgAAABwAHgAGACYABwAyAAAANwALAEQAEAA="}],\
["egonlang_errors",{"t":"PGIIIGGPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOO","n":["DivideByZero","EgonError","EgonErrorS","EgonResultMultiSpannedErr","EgonResultSingleSpannedErr","EgonSyntaxError","EgonTypeError","EmptyRange","Err","Err","ExtraToken","InvalidToken","InvalidTypeAlias","MismatchType","NotCallable","Ok","Ok","ReassigningConst","ReturnedUsedOutsideBlock","SyntaxError","TypeError","UknownListType","Undefined","UnexpectedInput","UninitializedConst","UninitializedUntypedLet","UnknownType","UnreachableCode","UnrecognizedEOF","UnrecognizedToken","UnterminatedString","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","serialize","serialize","serialize","to_diagnosis","to_diagnosis","to_diagnosis","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","expected","expected","name","name","name","name","token","token","token","actual","expected"],"q":[[0,"egonlang_errors"],[84,"egonlang_errors::EgonSyntaxError"],[93,"egonlang_errors::EgonTypeError"],[95,"core::result"],[96,"serde::de"],[97,"core::fmt"],[98,"serde::ser"],[99,"span"],[100,"egonlang_diagnostics"],[101,"alloc::string"],[102,"core::any"]],"i":[4,0,0,0,0,0,0,4,18,19,4,4,4,5,5,18,19,4,4,3,3,5,5,4,4,4,5,4,4,4,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,3,4,4,5,5,3,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,20,21,22,23,24,25,26,27,21,28,28],"f":"```````````````````````````````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{c}}{b{de}}}l{}{}}00{c{{n{f}}}A`}{c{{n{h}}}A`}{c{{n{j}}}A`}{{{b{f}}{b{f}}}Ab}{{{b{h}}{b{h}}}Ab}{{{b{j}}{b{j}}}Ab}{{{b{f}}{b{dAd}}}Af}0{{{b{h}}{b{dAd}}}Af}0{{{b{j}}{b{dAd}}}Af}0{cc{}}{hf}{jf}22{ce{}{}}00{{{b{f}}c}nAh}{{{b{h}}c}nAh}{{{b{j}}c}nAh}{{{b{f}}{b{Aj}}Al}An}{{{b{h}}{b{Aj}}Al}An}{{{b{j}}{b{Aj}}Al}An}{{{b{c}}}e{}{}}00{{{b{c}}}B`{}}00{c{{n{e}}}{}{}}00000{{{b{c}}}Bb{}}00```````````","D":"Aj","p":[[1,"reference"],[0,"mut"],[6,"EgonError",0],[6,"EgonSyntaxError",0],[6,"EgonTypeError",0],[1,"unit"],[6,"Result",95],[10,"Deserializer",96],[1,"bool"],[5,"Formatter",97],[8,"Result",97],[10,"Serializer",98],[1,"str"],[8,"Span",99],[5,"EgonDiagnosis",100],[5,"String",101],[5,"TypeId",102],[8,"EgonResultSingleSpannedErr",0],[8,"EgonResultMultiSpannedErr",0],[15,"UnrecognizedEOF",84],[15,"UnrecognizedToken",84],[15,"UninitializedConst",84],[15,"ReassigningConst",84],[15,"UninitializedUntypedLet",84],[15,"InvalidTypeAlias",84],[15,"ExtraToken",84],[15,"UnexpectedInput",84],[15,"MismatchType",93]],"r":[],"b":[[49,"impl-Display-for-EgonError"],[50,"impl-Debug-for-EgonError"],[51,"impl-Debug-for-EgonSyntaxError"],[52,"impl-Display-for-EgonSyntaxError"],[53,"impl-Display-for-EgonTypeError"],[54,"impl-Debug-for-EgonTypeError"],[56,"impl-From%3CEgonSyntaxError%3E-for-EgonError"],[57,"impl-From%3CEgonTypeError%3E-for-EgonError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFIABwAAAAMABgACAAsABAASAAkAHQAaADkAAQBAAB8A"}],\
["egonlang_lsp",{"t":"HCFFFFFNNNNNNNNNNONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["main","server","EgonLanguageServerBackend","LspDiagnosis","LspDiagnosisPosition","LspDiagnosisRange","LspDiagnosisSeverity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","clone","clone_into","did_change","did_open","documents","fmt","from","from","from","from","from","hover","initialize","into","into","into","into","into","new","shutdown","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"egonlang_lsp"],[2,"egonlang_lsp::server"],[54,"lsp_types"],[55,"core::future::future"],[56,"alloc::boxed"],[57,"core::pin"],[58,"core::fmt"],[59,"lsp_types::hover"],[60,"tower_lsp::service::client"],[61,"core::result"],[62,"core::any"]],"i":[0,0,0,0,0,0,0,18,19,20,5,4,18,19,20,5,4,5,4,4,5,5,5,5,18,19,20,5,4,5,5,18,19,20,5,4,5,5,4,18,19,20,5,4,18,19,20,5,4,18,19,20,5,4],"f":"{{}b}``````{{{d{c}}}{{d{e}}}{}{}}0000{{{d{fc}}}{{d{fe}}}{}{}}0000`{{{d{h}}}h}{{{d{c}}{d{fe}}}b{}{}}{{{d{j}}l}{{Ab{{A`{n}}}}}}{{{d{j}}Ad}{{Ab{{A`{n}}}}}}`{{{d{j}}{d{fAf}}}Ah}{cc{}}0000{{{d{j}}Aj}{{Ab{{A`{n}}}}}}{{{d{j}}Al}{{Ab{{A`{n}}}}}}{ce{}{}}0000{Anj}{{{d{j}}}{{Ab{{A`{n}}}}}}{{{d{c}}}e{}{}}{c{{B`{e}}}{}{}}000000000{{{d{c}}}Bb{}}0000","D":"Af","p":[[1,"unit"],[1,"reference"],[0,"mut"],[5,"LspDiagnosis",2],[5,"EgonLanguageServerBackend",2],[5,"DidChangeTextDocumentParams",54],[10,"Future",55],[5,"Box",56],[5,"Pin",57],[5,"DidOpenTextDocumentParams",54],[5,"Formatter",58],[8,"Result",58],[5,"HoverParams",59],[5,"InitializeParams",54],[5,"Client",60],[6,"Result",61],[5,"TypeId",62],[5,"LspDiagnosisPosition",2],[5,"LspDiagnosisRange",2],[5,"LspDiagnosisSeverity",2]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACsABAAAAAMABQATAB4AAQAlABEA"}],\
["egonlang_types",{"t":"FNNNNNNQQQQQQQQQQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNNN","n":["Type","bool","borrow","borrow_mut","clone","clone_into","deserialize","egon_bool","egon_fn","egon_identifier","egon_list","egon_number","egon_range","egon_string","egon_tuple","egon_unit","egon_unknown","eq","fmt","fmt","from","function","get_function_return","identifier","into","is_bool","is_builtin","is_function","is_identifier","is_known_list","is_list","is_number","is_range","is_string","is_tuple","is_type","is_unit","is_unknown","is_unknown_list","list","number","range","serialize","string","to_owned","to_string","try_from","try_into","tuple","type_args","type_env","type_id","type_name","typed","unit","unknown","unknown_list","RootScopeEndedError","TypeEnv","TypeEnvValue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_scope","eq","eq","fmt","fmt","fmt","from","from","from","from","get","get_scope_depth","into","into","into","is_const","new","new","new_const","of_type","set","start_scope","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"egonlang_types"],[57,"egonlang_types::type_env"],[105,"core::result"],[106,"serde::de"],[107,"core::fmt"],[108,"serde::ser"],[109,"alloc::string"],[110,"alloc::vec"],[111,"core::any"],[112,"core::option"]],"i":[0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,17,15,16,17,15,16,15,16,15,16,17,17,15,16,15,16,16,17,15,15,16,17,17,17,15,16,15,17,15,15,15,17,17,15,16,16,17,15,16,17,15,16,17,15,16],"f":"`{{}b}{{{d{c}}}{{d{e}}}{}{}}{{{d{fc}}}{{d{fe}}}{}{}}{{{d{b}}}b}{{{d{c}}{d{fe}}}h{}{}}{c{{j{b}}}l}``````````{{{d{b}}{d{b}}}n}{{{d{b}}{d{fA`}}}Ab}0{cc{}}{{bb}b}69{ce{}{}}{{{d{b}}}n}0000000000000{bb}<<{{{d{b}}c}jAd}={{{d{c}}}e{}{}}{{{d{c}}}Af{}}{c{{j{e}}}{}{}}0{{{Ah{b}}}b}{{{d{b}}}{{d{{Ah{b}}}}}}`{{{d{c}}}Aj{}}{{{d{b}}}{{d{Al}}}}8{{}b}00```{{{d{c}}}{{d{e}}}{}{}}00{{{d{fc}}}{{d{fe}}}{}{}}00{{{d{An}}}An}{{{d{B`}}}B`}{{{d{c}}{d{fe}}}h{}{}}0{{}Bb}{{{d{fBb}}}{{j{BdB`}}}}{{{d{An}}{d{An}}}n}{{{d{B`}}{d{B`}}}n}{{{d{An}}{d{fA`}}}Ab}{{{d{B`}}{d{fA`}}}Ab}0{cc{}}{bAn}11{{{d{Bb}}{d{Al}}}{{Bf{An}}}}{{{d{Bb}}}Bd}{ce{}{}}00`:33`{{{d{fBb}}{d{Al}}An}{{Bf{An}}}}{{{d{fBb}}}Bd}{{{d{c}}}e{}{}}0{{{d{c}}}Af{}}{c{{j{e}}}{}{}}00000{{{d{c}}}Aj{}}00","D":"Ed","p":[[5,"Type",0],[1,"reference"],[0,"mut"],[1,"unit"],[6,"Result",105],[10,"Deserializer",106],[1,"bool"],[5,"Formatter",107],[8,"Result",107],[10,"Serializer",108],[5,"String",109],[5,"Vec",110],[5,"TypeId",111],[1,"str"],[5,"TypeEnvValue",57],[5,"RootScopeEndedError",57],[5,"TypeEnv",57],[1,"usize"],[6,"Option",112]],"r":[],"b":[[18,"impl-Debug-for-Type"],[19,"impl-Display-for-Type"],[75,"impl-Debug-for-RootScopeEndedError"],[76,"impl-Display-for-RootScopeEndedError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAD8ADAAAAAAAAwARABcAAAArAAAALQADADIAAwA6AAAAPQAKAEkABABPAAAAVwAEAF4ACwA="}],\
["egonlang_verifier",{"t":"FQCCQHFNNNNQNNNEQNNNNENKKKCMMFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Verifier","expr_rule","prelude","rules","stmt_rule","verify_module","Verifier","add_rule","borrow","borrow_mut","default","expr_rule","from","into","new","rules","stmt_rule","try_from","try_into","type_id","verify","verify_module","with_default_rules","ResolveExpr","ResolveIdent","Rule","core","visit_expr","visit_stmt","AssertTypeRule","DeclareConstWithoutValueRule","DivideByZeroRule","InvalidTypeAliasNameRule","NoNonCallableCalledRule","NoReturnOutsideBlockRule","NoStmtsAfterReturnStmtRule","ReassigningConstValueRule","ReferencingUndefinedIdentifierRule","TypeMisMatchListItemsRule","TypeMismatchFnReturnExprRule","TypeMismatchIfCondExprRule","TypeMismatchIfthenElseExprRule","TypeMismatchInfixRule","TypeMismatchOnDeclarationsRule","TypeMismatchPrefixRule","TypeMismatchReassigningLetValuesRule","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_expr","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt","visit_stmt"],"q":[[0,"egonlang_verifier"],[6,"egonlang_verifier::prelude"],[23,"egonlang_verifier::rules"],[29,"egonlang_verifier::rules::core"],[233,"egonlang_core::ast::module"],[234,"egonlang_errors"],[235,"egonlang_verifier::verifier"],[236,"egonlang_verifier::rules::rule"],[237,"core::result"],[238,"core::any"],[239,"egonlang_core::ast::expressions"],[240,"span"],[241,"egonlang_core::ast::statements"],[242,"egonlang_verifier::rules::core::assert_type"],[243,"core::fmt"],[244,"egonlang_verifier::rules::core::const_declaration_with_no_value"],[245,"egonlang_verifier::rules::core::divide_by_zero"],[246,"egonlang_verifier::rules::core::invalid_type_alias_name"],[247,"egonlang_verifier::rules::core::no_non_callable_called"],[248,"egonlang_verifier::rules::core::no_return_outside_blocks"],[249,"egonlang_verifier::rules::core::no_stmts_after_return_stmt"],[250,"egonlang_verifier::rules::core::reassigning_const_values"],[251,"egonlang_verifier::rules::core::type_mismatch_fn_return_expr"],[252,"egonlang_verifier::rules::core::type_mismatch_if_cond_expr"],[253,"egonlang_verifier::rules::core::type_mismatch_if_then_else_exprs"],[254,"egonlang_verifier::rules::core::type_mismatch_infix"],[255,"egonlang_verifier::rules::core::type_mismatch_list_items"],[256,"egonlang_verifier::rules::core::type_mismatch_on_declarations"],[257,"egonlang_verifier::rules::core::type_mismatch_prefix"],[258,"egonlang_verifier::rules::core::type_mismatch_reassigning_let_values"],[259,"egonlang_verifier::rules::core::undefined_identifier"],[260,"alloc::string"]],"i":[0,0,0,0,0,0,0,6,6,6,6,0,6,6,6,0,0,6,6,6,6,0,6,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"f":"`````{{{f{bd}}}{{j{h}}}}`{{{f{bl}}c}hn}{{{f{c}}}{{f{e}}}{}{}}{{{f{bc}}}{{f{be}}}{}{}}{{}l}`{cc{}}{ce{}{}}2``{c{{A`{e}}}{}{}}0{{{f{c}}}Ab{}}{{{f{bl}}{f{bd}}}{{j{h}}}}`{ll}````{{{f{n}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{n}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}`````````````````:::::::::::::::::99999999999999999{{{f{An}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bd}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bf}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bh}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bj}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bl}}{f{bB`}}}{{A`{hBb}}}}{{{f{Bn}}{f{bB`}}}{{A`{hBb}}}}{{{f{C`}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cb}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cd}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cf}}{f{bB`}}}{{A`{hBb}}}}{{{f{Ch}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cj}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cl}}{f{bB`}}}{{A`{hBb}}}}{{{f{Cn}}{f{bB`}}}{{A`{hBb}}}}{{{f{D`}}{f{bB`}}}{{A`{hBb}}}}{{{f{Db}}{f{bB`}}}{{A`{hBb}}}}{cc{}}0000000000000000{ce{}{}}0000000000000000{{{f{c}}}Dd{}}0000000000000000{c{{A`{e}}}{}{}}000000000000000000000000000000000{{{f{c}}}Ab{}}0000000000000000{{{f{An}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bd}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bf}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bh}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bj}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bl}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bn}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{C`}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cb}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cd}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cf}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Ch}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cj}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cl}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cn}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{D`}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Db}}{f{Ad}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{An}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bd}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bf}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bh}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bj}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bl}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Bn}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{C`}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cb}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cd}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cf}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Ch}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cj}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cl}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Cn}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{D`}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}{{{f{Db}}{f{Al}}{f{Af}}{f{Ah}}{f{Aj}}}{{j{h}}}}","D":"Hf","p":[[0,"mut"],[5,"Module",233],[1,"reference"],[1,"unit"],[8,"EgonResultMultiSpannedErr",234],[5,"Verifier",6,235],[10,"Rule",23,236],[6,"Result",237],[5,"TypeId",238],[6,"Expr",239],[8,"Span",240],[10,"ResolveIdent",23,236],[10,"ResolveExpr",23,236],[6,"Stmt",241],[5,"AssertTypeRule",29,242],[5,"Formatter",243],[5,"Error",243],[5,"DeclareConstWithoutValueRule",29,244],[5,"DivideByZeroRule",29,245],[5,"InvalidTypeAliasNameRule",29,246],[5,"NoNonCallableCalledRule",29,247],[5,"NoReturnOutsideBlockRule",29,248],[5,"NoStmtsAfterReturnStmtRule",29,249],[5,"ReassigningConstValueRule",29,250],[5,"TypeMismatchFnReturnExprRule",29,251],[5,"TypeMismatchIfCondExprRule",29,252],[5,"TypeMismatchIfthenElseExprRule",29,253],[5,"TypeMismatchInfixRule",29,254],[5,"TypeMisMatchListItemsRule",29,255],[5,"TypeMismatchOnDeclarationsRule",29,256],[5,"TypeMismatchPrefixRule",29,257],[5,"TypeMismatchReassigningLetValuesRule",29,258],[5,"ReferencingUndefinedIdentifierRule",29,259],[5,"String",260]],"r":[[0,235],[6,235],[11,0],[15,0],[16,0],[21,0],[23,236],[24,236],[25,236],[29,242],[30,244],[31,245],[32,246],[33,247],[34,248],[35,249],[36,250],[37,259],[38,255],[39,251],[40,252],[41,253],[42,254],[43,256],[44,257],[45,258]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAKYACgAAAAAAAwABAAkAAQAQAAAAEgACABYAAAAYAAEAHAABAC8AMgCEAGUA"}],\
["span",{"t":"IIOO","n":["Span","Spanned","end","start"],"q":[[0,"span"]],"i":[0,0,1,1],"f":"````","D":"d","p":[[8,"Span",0]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAIAEAAAAAAAAQACAA=="}],\
["str_idxpos",{"t":"HH","n":["index_to_position","position_to_index"],"q":[[0,"str_idxpos"]],"i":[0,0],"f":"{{{d{b}}f}{{h{ff}}}}{{{d{b}}{h{ff}}}f}","D":"d","p":[[1,"str"],[1,"reference"],[1,"usize"],[1,"tuple"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["tracelog",{"t":"Q","n":["tracelog"],"q":[[0,"tracelog"]],"i":[0],"f":"`","D":"b","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
